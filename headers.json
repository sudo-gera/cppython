{"None": {"c++_code": "\n\t\t\t\tclass python_NoneType{};\n\t\t\t\tpython_NoneType python_None;\n\t\t\t", "python_code": "", "depends": []}, "Ellipsis": {"c++_code": "\n\t\t\t\tclass python_ellipsis{};\n\t\t\t\tpython_ellipsis python_Ellipsis;\n\t\t\t", "python_code": "Ellipsis=...", "depends": []}, "cache": {"c++_code": "\n\t\t\t\tstd::map<std::string,var> python_cache;\n\t\t\t\tvar set_cache(var q,std::string w){\n\t\t\t\t\tpython_cache[w]=q;\n\t\t\t\t\treturn q;\n\t\t\t\t}\n\t\t\t\tvar get_cache(std::string w){\n\t\t\t\t\treturn python_cache[w];\n\t\t\t\t}\n\t\t\t\tvar del_cache(std::string w){\n\t\t\t\t\tauto t=python_cache[w];\n\t\t\t\t\tpython_cache.erase(w);\n\t\t\t\t\treturn t;\n\t\t\t\t}\n\t\t\t", "python_code": "", "depends": []}, "python_variable": {"c++_code": "\n\t\t\t\t#define python_iftype(a,...) __VA_ARGS__ s;\\\n\t\t\t\t\tif ((a).type()==typeid(std::declval<python_variable<__VA_ARGS__>>())){\\\n\t\t\t\t\t\ts=cast((a),__VA_ARGS__);\\\n\t\t\t\t\t}\\\n\t\t\t\t\tif ((a).type()==typeid(std::declval<python_variable<__VA_ARGS__>>()))\n\n\t\t\t\t#define cast(q,...) (q.cast_with_line<__VA_ARGS__>(__LINE__))\n\n\t\t\t\t#define print_line() std::cout<<__LINE__<<std::endl;\n\n\t\t\t\ttemplate<typename T>\n\t\t\t\tclass python_variable{\n\t\t\t\tpublic:\n\t\t\t\t\tT*p;\n\t\t\t\t\tint64_t*c;\n\t\t\t\t\tT &value(){\n\t\t\t\t\t\treturn *p;\n\t\t\t\t\t}\n\t\t\t\t\tpython_variable(T a=int64_t(0)){\n\t\t\t\t\t\tc=new int64_t(1);\n\t\t\t\t\t\tp=new T(a);\n\t\t\t\t\t}\n\t\t\t\t\tpython_variable(const python_variable &a){\n\t\t\t\t\t\tp=a.p;\n\t\t\t\t\t\tc=a.c;\n\t\t\t\t\t\t*c+=1;\n\t\t\t\t\t}\n\t\t\t\t\tpython_variable operator=(T a){\n\t\t\t\t\t\tc=new int64_t(1);\n\t\t\t\t\t\tp=new T(a);\n\t\t\t\t\t}\n\t\t\t\t\tpython_variable operator=(const python_variable &a){\n\t\t\t\t\t\tp=a.p;\n\t\t\t\t\t\tc=a.c;\n\t\t\t\t\t\t*c+=1;\n\t\t\t\t\t}\n\t\t\t\t\t~python_variable(){\n\t\t\t\t\t\t*c-=1;\n\t\t\t\t\t\tif (*c==0){\n\t\t\t\t\t\t\tdelete p;\n\t\t\t\t\t\t\tdelete c;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttemplate <typename T>\n\t\t\t\tstd::any to_var(T q){\n\t\t\t\t\tstd::any t=python_variable<T>(q);\n\t\t\t\t\treturn t;\n\t\t\t\t}\n\n\t\t\t\ttemplate <typename T>\n\t\t\t\tT &from_var(std::any q,int64_t line){\n\t\t\t\t\tif (q.type()!=typeid(std::declval<python_variable<T>>())){\n\t\t\t\t\t\tstd::cout<<\"wrong cast\"<<std::endl;\n\t\t\t\t\t\tstd::cout<<\"    line \"<<line<<std::endl;\n\t\t\t\t\t\tstd::cout<<\"    have \"<<filt(q.type().name())<<std::endl;\n\t\t\t\t\t\tstd::cout<<\"    want \"<<filt(typeid(std::declval<python_variable<T>>()).name())<<std::endl;\n\t\t\t\t\t}\n\t\t\t\t\treturn std::any_cast<python_variable<T>>(q).value();\n\t\t\t\t}\n\n\t\t\t\tclass var{\n\t\t\t\tpublic:\n\t\t\t\t\tstd::any a;\n\t\t\t\t\ttemplate<typename t>\n\t\t\t\t\tvar(t q){\n\t\t\t\t\t\ta=to_var(q);\n\t\t\t\t\t}\n\t\t\t\t\tvar(){\n\t\t\t\t\t\ta=to_var(int64_t(0));\n\t\t\t\t\t}\n\t\t\t\t\ttemplate<typename t>\n\t\t\t\t\tvar operator=(t q){\n\t\t\t\t\t\ta=to_var(q);\n\t\t\t\t\t\treturn *this;\n\t\t\t\t\t}\n\t\t\t\t\ttemplate<typename t>\n\t\t\t\t\tt &cast_with_line(int64_t line){\n\t\t\t\t\t\treturn from_var<t>(a,line);\n\t\t\t\t\t}\n\t\t\t\t\tauto&type(){\n\t\t\t\t\t\treturn a.type();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tclass python_iterate{\n\t\t\t\tpublic:\n\t\t\t\t\tvar orig;\n\t\t\t\t\tpython_iterate(var q):orig(q){}\n\t\t\t\t\tclass iterator{\n\t\t\t\t\tpublic:\n\t\t\t\t\t\tvar orig;\n\t\t\t\t\t\tvar iter;\n\t\t\t\t\t\titerator(var q):orig(q),iter(q){\n\t\t\t\t\t\t\t{python_iftype(orig,std::vector<var>){\n\t\t\t\t\t\t\t\titer=cast(orig,decltype(s)).begin();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvoid operator++(){\n\t\t\t\t\t\t\t{python_iftype(orig,std::vector<var>){\n\t\t\t\t\t\t\t\t ++cast(iter,decltype(s)::iterator);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbool operator!=(iterator o){\n\t\t\t\t\t\t\t{python_iftype(orig,std::vector<var>){\n\t\t\t\t\t\t\t\treturn cast(iter,decltype(s)::iterator)!=cast(orig,decltype(s)).end();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar operator*(){\n\t\t\t\t\t\t\t{python_iftype(orig,std::vector<var>){\n\t\t\t\t\t\t\t\treturn *cast(iter,decltype(s)::iterator);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\titerator begin(){\n\t\t\t\t\t\treturn iterator(orig);\n\t\t\t\t\t}\n\t\t\t\t\titerator end(){\n\t\t\t\t\t\treturn iterator(orig);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tnamespace std {\n\t\t\t\t    template<>\n\t\t\t\t    struct hash<var> {\n\t\t\t\t        const size_t operator()(const var& c) const\n\t\t\t\t        {\n\t\t\t\t        \tvar q=c;\n\t\t\t\t        \t{python_iftype(q,std::complex<long double>){\n\n\t\t\t\t        \t\treturn std::hash<decltype(s)>()(s);\n\t\t\t\t        \t}}\n\n{python_iftype(q,long double){\n\n\t\t\t\t        \t\treturn std::hash<decltype(s)>()(s);\n\t\t\t\t        \t}}\n\n{python_iftype(q,int64_t){\n\n\t\t\t\t        \t\treturn std::hash<decltype(s)>()(s);\n\t\t\t\t        \t}}\n\n{python_iftype(q,bool){\n\n\t\t\t\t        \t\treturn std::hash<decltype(s)>()(s);\n\t\t\t\t        \t}}\n\n{python_iftype(q,std::string){\n\n\t\t\t\t        \t\treturn std::hash<decltype(s)>()(s);\n\t\t\t\t        \t}}\n\n{python_iftype(q,std::u32string){\n\n\t\t\t\t        \t\treturn std::hash<decltype(s)>()(s);\n\t\t\t\t        \t}}\n\n{python_iftype(q,std::vector<var>){\n\n\t\t\t\t        \t\treturn std::hash<decltype(s)>()(s);\n\t\t\t\t        \t}}\n\n\t\t\t\t        }\n\t\t\t\t    };\n\t\t\t\t}\n\n\t\t\t\tnamespace std {\n\t\t\t\t    template<>\n\t\t\t\t    struct equal_to<var> {\n\t\t\t\t        const size_t operator()(const var& c1,const var& c2) const\n\t\t\t\t        {\n\t\t\t\t        \treturn hash<var>()(c1)==hash<var>()(c2);\n\t\t\t\t        }\n\t\t\t\t    };\n\t\t\t\t}\n\t\t\t", "python_code": "", "depends": ["any", "iostream", "string", "vector", "filt"]}, "filt": {"c++_code": "\n\t\t\t\tstd::string exec(std::string command) {\n\t\t\t\t\tchar buffer[128];\n\t\t\t\t\tstd::string result = \"\";\n\n\t\t\t\t\t// Open pipe to file\n\t\t\t\t\tFILE* pipe = popen(command.c_str(), \"r\");\n\t\t\t\t\tif (!pipe) {\n\t\t\t\t\t\treturn \"popen failed!\";\n\t\t\t\t\t}\n\n\t\t\t\t\t// read till end of process:\n\t\t\t\t\twhile (!feof(pipe)) {\n\n\t\t\t\t\t\t// use buffer to read and add to result\n\t\t\t\t\t\tif (fgets(buffer, 128, pipe) != NULL)\n\t\t\t\t\t\t\tresult += buffer;\n\t\t\t\t\t}\n\n\t\t\t\t\tpclose(pipe);\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tstd::string filt(std::string q){\n\t\t\t\t\treturn exec(std::string(\"c++filt -t \")+q);\n\t\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t", "depends": ["string"]}, "func_example": {"c++_code": "\n\t\t\t\tvar func_example(var args,var kwargs){return int64_t(0);}\n\t\t\t", "python_code": "\n\t\t\t", "depends": []}, "builtins_abs": {"c++_code": "\n\t\t\tvar __python__abs(var a){\n\t\t\t\t{python_iftype(a,int64_t){\n\n\t\t\t\t\treturn std::abs(s);\n\t\t\t\t}}\n\n{python_iftype(a,int){\n\n\t\t\t\t\treturn std::abs(s);\n\t\t\t\t}}\n\n{python_iftype(a,long double){\n\n\t\t\t\t\treturn std::abs(s);\n\t\t\t\t}}\n\n{python_iftype(a,std::complex<long double>){\n\n\t\t\t\t\treturn std::abs(s);\n\t\t\t\t}}\n\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tdef abs(x):return __python__abs(x)\n\t\t\t", "depends": ["python_variable", "cmath"]}, "builtins_all": {"c++_code": "\n\t\t\t", "python_code": "\n\t\t\t\tdef all(iterable):\n\t\t\t\t\tfor element in iterable:\n\t\t\t\t\t\tif not element:\n\t\t\t\t\t\t\treturn False\n\t\t\t\t\treturn True\n\t\t\t", "depends": ["python_variable", "cmath"]}, "builtins_any": {"c++_code": "\n\t\t\t", "python_code": "\n\t\t\t\tdef any(iterable):\n\t\t\t\t\tfor element in iterable:\n\t\t\t\t\t\tif element:\n\t\t\t\t\t\t\treturn True\n\t\t\t\t\treturn False\n\t\t\t", "depends": ["python_variable", "cmath"]}, "builtins_bin": {"c++_code": "\n\t\t\tvar __python__bin(var a){\n\t\t\t\tstd::string f;\n\t\t\t\tint64_t d=cast(a,int64_t);\n\t\t\t\tint64_t s=d<0?1:0;\n\t\t\t\td=std::abs(d);\n\t\t\t\tif (d==0){\n\t\t\t\t\tf.push_back('0');\n\t\t\t\t}\n\t\t\t\twhile (d){\n\t\t\t\t\tf.push_back(d%2+'0');\n\t\t\t\t\td/=2;\n\t\t\t\t}\n\t\t\t\treverse(f.begin(),f.end());\n\t\t\t\tf=std::string({'0','b'})+f;\n\t\t\t\tif (s){\n\t\t\t\t\tf=std::string({'-'})+f;\n\t\t\t\t}\n\t\t\t\treturn f;\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tdef bin(x):return __python__bin(x)\n\t\t\t", "depends": ["python_variable", "cmath", "string", "algorithm"]}, "builtins_bool": {"c++_code": "\n\t\t\tvar __python__bool(var a=python_None){\n\t\t\t\t{python_iftype(a,python_NoneType){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,python_ellipsis){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,int){\n\t\t\t\t\treturn s!=0;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,bool){\n\t\t\t\t\treturn s!=0;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,int64_t){\n\t\t\t\t\treturn s!=0;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,std::string){\n\t\t\t\t\treturn s.size()!=0;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,std::u32string){\n\t\t\t\t\treturn s.size()!=0;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,std::vector<var>){\n\t\t\t\t\treturn s.size()!=0;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t{python_iftype(a,std::set<var>){\n\t\t\t\t\treturn s.size()!=0;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,std::map<var,var>){\n\t\t\t\t\treturn s.size()!=0;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tdef bool(x):return __python__bool(x)\n\t\t\t", "depends": ["python_variable", "None", "vector", "string"]}, "builtins_bytearray": {"c++_code": "\n\t\t\tvar __python__bytearray(var q=std::string(),var w=std::string()){\n\t\t\t\t{iftype(q,std::string){\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{iftype(q,std::u32string){\n\t\t\t\t\treturn to_u8(q);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{iftype(q,int64_t){\n\t\t\t\t\tvector<char> a(t);\n\t\t\t\t\treturn std::string(a.begin(),a.end());\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tauto a=python_iterate(q)\n\t\t\t\treturn std::string(a.begin(),a.end());\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tdef bytearray(x):return __python__bytearray(x)\n\t\t\t", "depends": ["python_variable", "unicode_convert", "string"]}, "builtins_bytes": {"c++_code": "\n\t\t\t", "python_code": "\n\t\t\t\tdef bytes(x):return __python__bytes(x)\n\t\t\t", "depends": ["python_variable", "unicode_convert", "string"]}, "builtins_chr": {"c++_code": "\n\t\t\tvar __python__chr(var q){\n\t\t\t\treturn std::u32string({chr(cast(q,int64_t))});\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tdef chr(x):return __python__chr(x)\n\t\t\t", "depends": ["python_variable", "unicode_convert", "string"]}, "builtins_complex": {"c++_code": "\n\t\t\tvar __python__complex(var q=0,var w=0){\n\t\t\t\t{python_iftype(q,std::complex<long double>){\n\t\t\t\t}else{\n\t\t\t\t\tq=std::complex<long double>(cast(__python__float(q),long double),0);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(w,std::complex<long double>){\n\t\t\t\t}else{\n\t\t\t\t\tw=std::complex<long double>(cast(__python__float(w),long double),0);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn cast(q,std::complex<long double>)+std::complex<long double>(0,1)*cast(w,std::complex<long double>);\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tdef complex(x=0,y=0):return __python__complex(x,y)\n\t\t\t", "depends": ["python_variable", "complex", "builtins_float"]}, "builtins_divmod": {"c++_code": "\n\t\t\tvar __python__divmod(var q,var w){\n\t\t\t\tauto ret=std::vector<var>();\n\t\t\t\t{python_iftype(q,int64_t){\n\t\t\t\t\tauto d=s;\n\t\t\t\t\t{python_iftype(w,int64_t){\n\t\t\t\t\t\tret[0]=d/s;\n\t\t\t\t\t\tret[1]=d%s;\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (ret.size()==0){\n\t\t\t\t\tq=__python__float(q);\n\t\t\t\t\tw=__python__float(w);\n\t\t\t\t\tauto e=cast(q,long double);\n\t\t\t\t\tauto r=cast(w,long double);\n\t\t\t\t\tauto t=std::floor(e/r);\n\t\t\t\t\tret.push_back(t);\n\t\t\t\t\tret.push_back(e-t*r);\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tdef divmmod(x,y):return __python__divmod(x,y)\n\t\t\t", "depends": ["python_variable", "cmath", "vector", "builtins_float"]}, "builtins_float": {"c++_code": "\n\t\t\t\tvar __python__float(var q=int64_t(0)){\n\t\t\t\t//\t{python_iftype(q,std::u32string){\n\t\t\t\t//\t\treturn s;\n\t\t\t\t//\t}\n\t\t\t\t//\t}\n\t\t\t\t//\t{python_iftype(q,std::string){\n\t\t\t\t//\t\treturn to_u32(s);\n\t\t\t\t//\t}\n\t\t\t\t//\t}\n\t\t\t\t\t{python_iftype(q,int64_t){\n\t\t\t\t\t\treturn (long double)(s);\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t{python_iftype(q,long double){\n\t\t\t\t\t\treturn s;\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t{python_iftype(q,int){\n\t\t\t\t\t\treturn (long double)(s);\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tdef float(x):return __python__float(x)\n\t\t\t", "depends": ["python_variable", "string"]}, "builtins_id": {"c++_code": "\n\t\t\tvar __python__id(var q){\n\t\t\t\t{python_iftype(q,std::complex<long double>){\n\n\t\t\t\t\treturn int64_t(&cast(q,decltype(s)));\n\t\t\t\t}}\n\n{python_iftype(q,long double){\n\n\t\t\t\t\treturn int64_t(&cast(q,decltype(s)));\n\t\t\t\t}}\n\n{python_iftype(q,int64_t){\n\n\t\t\t\t\treturn int64_t(&cast(q,decltype(s)));\n\t\t\t\t}}\n\n{python_iftype(q,bool){\n\n\t\t\t\t\treturn int64_t(&cast(q,decltype(s)));\n\t\t\t\t}}\n\n{python_iftype(q,std::string){\n\n\t\t\t\t\treturn int64_t(&cast(q,decltype(s)));\n\t\t\t\t}}\n\n{python_iftype(q,std::u32string){\n\n\t\t\t\t\treturn int64_t(&cast(q,decltype(s)));\n\t\t\t\t}}\n\n{python_iftype(q,std::vector<var>){\n\n\t\t\t\t\treturn int64_t(&cast(q,decltype(s)));\n\t\t\t\t}}\n\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tdef id(x):return __python__id(x)\n\t\t\t", "depends": ["python_variable", "string", "vector"]}, "builtins_len": {"c++_code": "\n\t\t\t\tvar __python__len(var q){\n\t\t\t\t\t{python_iftype(q,std::vector<var>){\n\t\t\t\t\t\treturn int64_t(s.size());\n\t\t\t\t\t}}\n\t\t\t\t\t{python_iftype(q,std::u32string){\n\t\t\t\t\t\treturn int64_t(s.size());\n\t\t\t\t\t}}\n\t\t\t\t\t{python_iftype(q,std::string){\n\t\t\t\t\t\treturn int64_t(s.size());\n\t\t\t\t\t}}\n\t\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tdef len(x):return __python__len(x)\n\t\t\t", "depends": ["python_variable", "vector"]}, "builtins_list": {"c++_code": "\n\t\t\t\tvar __python__list(var q=std::vector<var>()){\n\t\t\t\t\tauto s=std::vector<var>();\n\t\t\t\t\tfor (var w:python_iterate(q)){\n\t\t\t\t\t\ts.push_back(w);\n\t\t\t\t\t}\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tdef list(x):return __python__list(x)\n\t\t\t", "depends": ["python_variable", "vector"]}, "builtins_print": {"c++_code": "\n\t\t\t\tvar __python__print(var q=std::vector<var>(),var sep=std::u32string({' '}),var end=std::u32string({'\\n'})){\n\t\t\t\t\tauto s=std::u32string();\n\t\t\t\t\tauto _end=cast(__python__str(end),std::u32string);\n\t\t\t\t\tauto _sep=cast(__python__str(sep),std::u32string);\n\t\t\t\t\tauto c=int64_t(0);\n\t\t\t\t\tfor (var w:python_iterate(q)){\n\t\t\t\t\t\ts+=(c?_sep:std::u32string())+cast(__python__str(w),std::u32string);\n\t\t\t\t\t\tc=c?c:1;\n\t\t\t\t\t}\n\t\t\t\t\ts+=_end;\n\t\t\t\t\tstd::cout<<to_u8(s);\n\t\t\t\t\treturn python_None;\n\t\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tdef print(q,sep=' ',end='\\n'):return __python__print(q,sep,end)\n\t\t\t", "depends": ["python_variable", "vector", "string", "builtins_str", "iostream", "unicode_convert", "None"]}, "builtins_str": {"c++_code": "\n\t\t\t\tvar __python__str(var q=std::u32string()){\n\t\t\t\t\t{python_iftype(q,std::u32string){\n\t\t\t\t\t\treturn s;\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t{python_iftype(q,std::string){\n\t\t\t\t\t\treturn to_u32(s);\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t{python_iftype(q,int64_t){\n\t\t\t\t\t\treturn to_u32(std::to_string(s));\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t{python_iftype(q,long double){\n\t\t\t\t\t\treturn to_u32(std::to_string(s));\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t{python_iftype(q,std::complex<long double>){\n\t\t\t\t\t\tif (s.imag()<0){\n\t\t\t\t\t\t\treturn to_u32(std::to_string(s.real())+std::to_string(s.imag())+\"j\");\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\treturn to_u32(std::to_string(s.real())+\"+\"+std::to_string(s.imag())+\"j\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t{python_iftype(q,int){\n\t\t\t\t\t\treturn to_u32(std::to_string(s));\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t{python_iftype(q,bool){\n\t\t\t\t\t\treturn to_u32(s?\"True\":\"False\");\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t{python_iftype(q,python_NoneType){\n\t\t\t\t\t\treturn to_u32(\"None\");\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t{python_iftype(q,python_ellipsis){\n\t\t\t\t\t\treturn to_u32(\"Ellipsis\");\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tdef str(x):return __python__str(x)\n\t\t\t", "depends": ["python_variable", "vector", "string", "None", "Ellipsis", "unicode_convert", "complex"]}, "unicode_convert": {"c++_code": "\n\t\t\t\tchar32_t chr(int64_t q){\n\t\t\t\t\tif(q<(1<<7)){\n\t\t\t\t\t\treturn ((q&127)<<0);\n\t\t\t\t\t}\n\t\t\t\t\tif(q<(1<<11)){\n\t\t\t\t\t\treturn 49280+((q&1984)<<2)+((q&63)<<0);\n\t\t\t\t\t}\n\t\t\t\t\tif(q<(1<<16)){\n\t\t\t\t\t\treturn 14712960+((q&61440)<<4)+((q&4032)<<2)+((q&63)<<0);\n\t\t\t\t\t}\n\t\t\t\t\tif(q<(1<<21)){\n\t\t\t\t\t\treturn 4034953344+((q&1835008)<<6)+((q&258048)<<4)+((q&4032)<<2)+((q&63)<<0);\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tint64_t ord(char32_t q){\n\t\t\t\t\tint64_t r=0;\n\t\t\t\t\tint w,e;\n\t\t\t\t\tfor (w=3*8;w>-1;w-=8){\n\t\t\t\t\t\tint started=0;\n\t\t\t\t\t\tfor (e=7;e>-1;--e){\n\t\t\t\t\t\t\tif (started==0 and (q&(1<<(w+e)))==0){\n\t\t\t\t\t\t\t\tstarted=1;\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tif (started){\n\t\t\t\t\t\t\t\tr=(r<<1)+!!(q&(1<<(w+e)));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\n\t\t\t\tstd::u32string to_u32(std::string q){\n\t\t\t\t\tstd::u32string r;\n\t\t\t\t\tfor(int64_t w=0;w<q.size();++w){\n\t\t\t\t\t\tif ((q[w]&(0b10000000))==0){\n\t\t\t\t\t\t\tr.push_back(((int32_t(uint8_t(q[w]))<<0)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((q[w]&(0b11100000))==0b11000000 and w<q.size()-1){\n\t\t\t\t\t\t\tr.push_back(((int32_t(uint8_t(q[w]))<<8)+(int32_t(uint8_t(q[w+1]))<<0)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((q[w]&(0b11110000))==0b11100000 and w<q.size()-2){\n\t\t\t\t\t\t\tr.push_back(((int32_t(uint8_t(q[w]))<<16)+(int32_t(uint8_t(q[w+1]))<<8)+(int32_t(uint8_t(q[w+2]))<<0)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((q[w]&(0b11111000))==0b11110000 and w<q.size()-3){\n\t\t\t\t\t\t\tr.push_back(((int32_t(uint8_t(q[w]))<<24)+(int32_t(uint8_t(q[w+1]))<<16)+(int32_t(uint8_t(q[w+2]))<<8)+(int32_t(uint8_t(q[w+3]))<<0)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor(auto &w:r){\n\t\t\t\t\t\tw=ord(w);\n\t\t\t\t\t}\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\n\t\t\t\tstd::string to_u8(std::u32string q){\n\t\t\t\t\tfor(auto &w:q){\n\t\t\t\t\t\tw=chr(w);\n\t\t\t\t\t}\t\n\t\t\t\t\tstd::string r;\n\t\t\t\t\tfor(auto w:q){\n\t\t\t\t\t\tif (w&0b11111111000000000000000000000000){\n\t\t\t\t\t\t\tr.push_back((w&0b11111111000000000000000000000000)>>24);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (w&0b111111110000000000000000){\n\t\t\t\t\t\t\tr.push_back((w&0b111111110000000000000000)>>16);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (w&0b1111111100000000){\n\t\t\t\t\t\t\tr.push_back((w&0b1111111100000000)>>8);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr.push_back(w&0b11111111);\n\t\t\t\t\t}\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t", "python_code": "", "depends": ["string"]}, "operator_Not": {"c++_code": "\n\t\t\tvar python_operator_Not(var q){\n\t\t\t\tq=__python__bool(q);\n\t\t\t\t{python_iftype(q,bool){\n\t\t\t\t\treturn !s;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t", "python_code": "", "depends": ["python_variable"]}, "operator_Pow": {"c++_code": "\n\t\t\tauto python_operator_Pow=__python__pow;\n\t\t", "python_code": "", "depends": ["python_variable", "builtins_pow"]}, "operator_Is": {"c++_code": "\n\t\t\tvar python_operator_Is(var q,var w){\n\t\t\t\treturn python_operator_Eq(__python__id(q),__python__id(w));\n\t\t\t}\n\t\t", "python_code": "", "depends": ["python_variable", "builtins_id", "operator_Eq"]}, "operator_IsNot": {"c++_code": "\n\t\t\tvar python_operator_IsNot(var q,var w){\n\t\t\t\treturn python_operator_Not(python_operator_Is(q,w));\n\t\t\t}\n\t\t", "python_code": "", "depends": ["python_variable", "operator_Is"]}, "operator_In": {"c++_code": "\n\t\t\tvar python_operator_NotIn(var q,var w){\n\t\t\t\tfor (auto e:python_iterate(w)){\n\t\t\t\t\tif (operator_Eq(q,e)){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t", "python_code": "", "depends": ["python_variable", "operator_Eq"]}, "operator_NotIn": {"c++_code": "\n\t\t\tvar python_operator_NotIn(var q,var w){\n\t\t\t\treturn python_operator_Not(python_operator_In(q,w));\n\t\t\t}\n\t\t", "python_code": "", "depends": ["python_variable", "operator_In"]}, "stdc++": {"c++_code": "#include<bits/stdc++.h>", "python_code": "", "depends": []}, "vector": {"c++_code": "#include<vector>", "python_code": "", "depends": []}, "string": {"c++_code": "#include<string>", "python_code": "", "depends": []}, "complex": {"c++_code": "#include<complex>", "python_code": "", "depends": []}, "iostream": {"c++_code": "#include<iostream>", "python_code": "", "depends": []}, "algorithm": {"c++_code": "#include<algorithm>", "python_code": "", "depends": []}, "functional": {"c++_code": "#include<functional>", "python_code": "", "depends": []}, "map": {"c++_code": "#include<map>", "python_code": "", "depends": []}, "any": {"c++_code": "#include<any>", "python_code": "", "depends": []}, "cmath": {"c++_code": "#include<cmath>", "python_code": "", "depends": []}, "cstdio": {"c++_code": "#include<cstdio>", "python_code": "", "depends": []}, "cstdlib": {"c++_code": "#include<cstdlib>", "python_code": "", "depends": []}, "levels": {"c++_code": "\n\t\t\t\t#define python_level_type_first std::u32string\n\t\t\t\t#define python_level_type_second var\n\t\t\t\t#define convert_first_type to_u8\n\t\t\t\tstd::vector<std::map<python_level_type_first,python_level_type_second*>> python_globals;\n\t\t\t\tstd::vector<std::map<python_level_type_first,python_level_type_second>*> python_locals_pointers;\n\t\t\t\t#define python_global(q)\\\n\t\t\t\t \tif (!python_globals[0].count(q)){\\\n\t\t\t\t\t\t(*(python_locals_pointers[0]))[q]=int64_t(0);\\\n\t\t\t\t\t\tpython_globals[0][q]=&((*(python_locals_pointers[0]))[q]);\\\n\t\t\t\t\t}\\\n\t\t\t\t\tpython_globals[python_globals.size()-1][q]=python_globals[0][q];\n\n\t\t\t\t#define python_nonlocal(q)\\\n\t\t\t\t \tif (!python_globals[python_globals.size()-2].count(q)){\\\n\t\t\t\t\t\t(*(python_locals_pointers[python_locals_pointers.size()-2]))[q]=int64_t(0);\\\n\t\t\t\t\t\tpython_globals[python_globals.size()-2][q]=&((*(python_locals_pointers[python_locals_pointers.size()-2]))[q]);\\\n\t\t\t\t\t}\\\n\t\t\t\t\tpython_globals[python_globals.size()-1][q]=python_globals[python_globals.size()-2][q];\n\t\t\t\t\t\n\t\t\t\tpython_level_type_second& python_get(python_level_type_first q){\n\t\t\t\t\tfor (int64_t w=python_globals.size()-1;w>=0;--w){\n\t\t\t\t\t\tif (python_globals[w].count(q)){\n\t\t\t\t\t\t\treturn *(python_globals[w][q]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstd::cout<<std::string(\"name \")+convert_first_type(q)+std::string(\" is undefined\")<<std::endl;\n\t\t\t\t\treturn *(python_globals[0][q]);\n\t\t\t\t}\n\n\t\t\t\tbool __python__isdefined(python_level_type_first q){\n\t\t\t\t\tfor (auto w=python_globals.size()-1;w>=0;--w){\n\t\t\t\t\t\tif (python_globals[w].count(q)){\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tpython_level_type_second& python_set(python_level_type_first q){\n\t\t\t\t\tif (!python_globals[python_globals.size()-1].count(q)) {\n\t\t\t\t\t\t(*(python_locals_pointers[python_locals_pointers.size()-1]))[q]=int64_t(0);\n\t\t\t\t\t\tpython_globals[python_globals.size()-1][q]=&((*(python_locals_pointers[python_locals_pointers.size()-1]))[q]);\n\t\t\t\t\t}\n\t\t\t\t\treturn *(python_globals[python_globals.size()-1][q]);\n\t\t\t\t}\n\n\t\t\t\t#define python_create_level()\\\n\t\t\t\t\tpython_globals.emplace_back();\\\n\t\t\t\t\tstd::map<python_level_type_first,python_level_type_second> python_locals;\\\n\t\t\t\t\tpython_locals_pointers.push_back(&python_locals);\n\n\t\t\t\t#define python_delete_level()\\\n\t\t\t\t\tpython_globals.pop_back();\\\n\t\t\t\t\tpython_locals_pointers.pop_back();\n\t\t\t", "python_code": "", "depends": ["vector", "string", "map", "python_variable", "unicode_convert"]}}