{"None": {"c++_code": "\n\t\t\t\tclass python_NoneType{};\n\t\t\t\tpython_NoneType python_None;\n\t\t\t", "python_code": "", "depends": []}, "cache": {"c++_code": "\n\t\t\t\tstd::map<std::string,var> python_cache;\n\t\t\t\tvar set_cache(var q,std::string w){\n\t\t\t\t\tpython_cache[w]=q;\n\t\t\t\t\treturn q;\n\t\t\t\t}\n\t\t\t\tvar get_cache(std::string w){\n\t\t\t\t\treturn python_cache[w];\n\t\t\t\t}\n\t\t\t\tvar del_cache(std::string w){\n\t\t\t\t\tauto t=python_cache[w];\n\t\t\t\t\tpython_cache.erase(w);\n\t\t\t\t\treturn t;\n\t\t\t\t}\n\t\t\t", "python_code": "", "depends": []}, "python_variable": {"c++_code": "\n\t\t\t\t#define python_iftype(a,...) __VA_ARGS__ s;\t\t\t\t\tif ((a).type()==typeid(std::declval<python_variable<__VA_ARGS__>>())){\t\t\t\t\t\ts=cast((a),__VA_ARGS__);\t\t\t\t\t}\t\t\t\t\tif ((a).type()==typeid(std::declval<python_variable<__VA_ARGS__>>()))\n\n\t\t\t\t#define cast(q,...) (q.cast_with_line<__VA_ARGS__>(__LINE__))\n\n\t\t\t\t#define print_line() std::cout<<__LINE__<<std::endl;\n\n\t\t\t\ttemplate<typename T>\n\t\t\t\tclass python_variable{\n\t\t\t\tpublic:\n\t\t\t\t\tT*p;\n\t\t\t\t\tint64_t*c;\n\t\t\t\t\tT &value(){\n\t\t\t\t\t\treturn *p;\n\t\t\t\t\t}\n\t\t\t\t\tpython_variable(T a=int64_t(0)){\n\t\t\t\t\t\tc=new int64_t(1);\n\t\t\t\t\t\tp=new T(a);\n\t\t\t\t\t}\n\t\t\t\t\tpython_variable(const python_variable &a){\n\t\t\t\t\t\tp=a.p;\n\t\t\t\t\t\tc=a.c;\n\t\t\t\t\t\t*c+=1;\n\t\t\t\t\t}\n\t\t\t\t\tpython_variable operator=(T a){\n\t\t\t\t\t\tc=new int64_t(1);\n\t\t\t\t\t\tp=new T(a);\n\t\t\t\t\t}\n\t\t\t\t\tpython_variable operator=(const python_variable &a){\n\t\t\t\t\t\tp=a.p;\n\t\t\t\t\t\tc=a.c;\n\t\t\t\t\t\t*c+=1;\n\t\t\t\t\t}\n\t\t\t\t\t~python_variable(){\n\t\t\t\t\t\t*c-=1;\n\t\t\t\t\t\tif (*c==0){\n\t\t\t\t\t\t\tdelete p;\n\t\t\t\t\t\t\tdelete c;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttemplate <typename T>\n\t\t\t\tstd::any to_var(T q){\n\t\t\t\t\tstd::any t=python_variable<T>(q);\n\t\t\t\t\treturn t;\n\t\t\t\t}\n\n\t\t\t\ttemplate <typename T>\n\t\t\t\tT &from_var(std::any q,int64_t line){\n\t\t\t\t\tif (q.type()!=typeid(std::declval<python_variable<T>>())){\n\t\t\t\t\t\tstd::cout<<\"wrong cast\"<<std::endl;\n\t\t\t\t\t\tstd::cout<<\"    line \"<<line<<std::endl;\n\t\t\t\t\t\tstd::cout<<\"    have \"<<q.type().name()<<std::endl;\n\t\t\t\t\t\tstd::cout<<\"    want \"<<typeid(std::declval<python_variable<T>>()).name()<<std::endl;\n\t\t\t\t\t}\n\t\t\t\t\treturn std::any_cast<python_variable<T>>(q).value();\n\t\t\t\t}\n\n\t\t\t\tclass var{\n\t\t\t\tpublic:\n\t\t\t\t\tstd::any a;\n\t\t\t\t\ttemplate<typename t>\n\t\t\t\t\tvar(t q){\n\t\t\t\t\t\ta=to_var(q);\n\t\t\t\t\t}\n\t\t\t\t\tvar(){\n\t\t\t\t\t\ta=to_var(int64_t(0));\n\t\t\t\t\t}\n\t\t\t\t\ttemplate<typename t>\n\t\t\t\t\tvar operator=(t q){\n\t\t\t\t\t\ta=to_var(q);\n\t\t\t\t\t\treturn *this;\n\t\t\t\t\t}\n\t\t\t\t\ttemplate<typename t>\n\t\t\t\t\tt &cast_with_line(int64_t line){\n\t\t\t\t\t\treturn from_var<t>(a,line);\n\t\t\t\t\t}\n\t\t\t\t\tauto&type(){\n\t\t\t\t\t\treturn a.type();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tclass python_iterate{\n\t\t\t\tpublic:\n\t\t\t\t\tvar orig;\n\t\t\t\t\tpython_iterate(var q):orig(q){}\n\t\t\t\t\tclass iterator{\n\t\t\t\t\tpublic:\n\t\t\t\t\t\tvar orig;\n\t\t\t\t\t\tvar iter;\n\t\t\t\t\t\titerator(var q):orig(q),iter(q){\n\t\t\t\t\t\t\t{python_iftype(orig,std::vector<var>){\n\t\t\t\t\t\t\t\titer=cast(orig,decltype(s)).begin();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvoid operator++(){\n\t\t\t\t\t\t\t{python_iftype(orig,std::vector<var>){\n\t\t\t\t\t\t\t\t ++cast(iter,decltype(s)::iterator);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbool operator!=(iterator o){\n\t\t\t\t\t\t\t{python_iftype(orig,std::vector<var>){\n\t\t\t\t\t\t\t\treturn cast(iter,decltype(s)::iterator)!=cast(orig,decltype(s)).end();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar operator*(){\n\t\t\t\t\t\t\t{python_iftype(orig,std::vector<var>){\n\t\t\t\t\t\t\t\treturn *cast(iter,decltype(s)::iterator);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\titerator begin(){\n\t\t\t\t\t\treturn iterator(orig);\n\t\t\t\t\t}\n\t\t\t\t\titerator end(){\n\t\t\t\t\t\treturn iterator(orig);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t", "python_code": "", "depends": ["any", "iostream", "string", "vector"]}, "builtins__wrapper": {"c++_code": "\n\t\t\ttemplate<typename t>\n\t\t\tclass __python__builtins__wrapper{\n\t\t\tpublic:\n\t\t\t\tt d;\n\t\t\t\tbool bc;\n\t\t\t\t__python__builtins__wrapper(t f,bool bc_=1){\n\t\t\t\t\td=f;\n\t\t\t\t\tbc=bc_;\n\t\t\t\t}\n\t\t\t\tvar operator()(var q,var w){\n\t\t\t\t\tauto a=cast(q,std::vector<var>);\n\t\t\t\t\tif (bc){\n\t\t\t\t\t\tfor (auto &w:a){\n\t\t\t\t\t\t\t{python_iftype(w,bool){\n\t\t\t\t\t\t\t\tw=int64_t(s);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (a.size()==0){\n\t\t\t\t\t\treturn d();\n\t\t\t\t\t}\n\t\t\t\t\tif (a.size()==1){\n\t\t\t\t\t\treturn d(a[0]);\n\t\t\t\t\t}\n\t\t\t\t\tif (a.size()==2){\n\t\t\t\t\t\treturn d(a[0],a[1]);\n\t\t\t\t\t}\n\t\t\t\t\tif (a.size()==3){\n\t\t\t\t\t\treturn d(a[0],a[1],a[2]);\n\t\t\t\t\t}\n\t\t\t\t\tif (a.size()==4){\n\t\t\t\t\t\treturn d(a[0],a[1],a[2],a[3]);\n\t\t\t\t\t}\n\t\t\t\t\tif (a.size()==5){\n\t\t\t\t\t\treturn d(a[0],a[1],a[2],a[3],a[4]);\n\t\t\t\t\t}\n\t\t\t\t\tif (a.size()==6){\n\t\t\t\t\t\treturn d(a[0],a[1],a[2],a[3],a[4],a[5]);\n\t\t\t\t\t}\n\t\t\t\t\tif (a.size()==7){\n\t\t\t\t\t\treturn d(a[0],a[1],a[2],a[3],a[4],a[5],a[6]);\n\t\t\t\t\t}\n\t\t\t\t\tif (a.size()==8){\n\t\t\t\t\t\treturn d(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\t", "python_code": "", "depends": ["python_variable", "vector"]}, "builtins_abs": {"c++_code": "\n\t\t\tvar __python___abs(var a){\n\t\t\t\t{python_iftype(a,int){\n\t\t\t\t\treturn std::abs(s);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,int64_t){\n\t\t\t\t\treturn std::abs(s);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,long float){\n\t\t\t\t\treturn std::fabs(s);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\tpython__builtins__abs=__python__builtins__wrapper(__python__abs)\n\t\t\t", "depends": ["python_variable", "builtins__wrapper", "cmath"]}, "builtins_bin": {"c++_code": "\n\t\t\tvar __python__bin(var a){\n\t\t\t\tstd::string f;\n\t\t\t\tint64_t d=cast(a,int64_t);\n\t\t\t\tint64_t s=d<0?1:0;\n\t\t\t\td=std::abs(d);\n\t\t\t\tif (d==0){\n\t\t\t\t\tf.push_back('0');\n\t\t\t\t}\n\t\t\t\twhile (d){\n\t\t\t\t\tf.push_back(d%2+'0');\n\t\t\t\t\td/=2;\n\t\t\t\t}\n\t\t\t\treverse(f.begin(),f.end());\n\t\t\t\tf=std::string({'0','b'})+f;\n\t\t\t\tif (s){\n\t\t\t\t\tf=std::string({'-'})+f;\n\t\t\t\t}\n\t\t\t\treturn f;\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tpython__builtins__bin=__python__builtins__wrapper(__python__bin)\n\t\t\t", "depends": ["python_variable", "cmath", "builtins__wrapper", "string", "algorithm"]}, "builtins_bool": {"c++_code": "\n\t\t\tvar __python__bool(var a=python_None){\n\t\t\t\t{python_iftype(a,python_NoneType){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,int){\n\t\t\t\t\treturn s!=0;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,bool){\n\t\t\t\t\treturn s!=0;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,int64_t){\n\t\t\t\t\treturn s!=0;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,std::string){\n\t\t\t\t\treturn s.size()!=0;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,std::u32string){\n\t\t\t\t\treturn s.size()!=0;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(a,std::vector<var>){\n\t\t\t\t\treturn s.size()!=0;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// {python_iftype(a,std::set<var>){\n\t\t\t\t// \treturn s.size()!=0;\n\t\t\t\t// }\n\t\t\t\t// }\n\t\t\t\t// {python_iftype(a,std::map<var,var>){\n\t\t\t\t// \treturn s.size()!=0;\n\t\t\t\t// }\n\t\t\t\t// }\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tpython__builtins__bool=__python__builtins__wrapper(__python__bool)\n\t\t\t", "depends": ["python_variable", "builtins__wrapper", "None", "vector", "string"]}, "builtins_bytearray": {"c++_code": "\n\t\t\tvar __python__bytearray(var q=std::string(),var w=std::string()){\n\t\t\t\t{iftype(q,std::string){\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{iftype(q,std::u32string){\n\t\t\t\t\treturn to_u8(q);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{iftype(q,int64_t){\n\t\t\t\t\tvector<char> a(t);\n\t\t\t\t\treturn std::string(a.begin(),a.end());\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tauto a=python_iterate(q)\n\t\t\t\treturn std::string(a.begin(),a.end());\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tpython__builtins__bytearray=__python__builtins__wrapper(__python__bytearray)\n\t\t\t", "depends": ["python_variable", "unicode_convert", "builtins__wrapper", "string"]}, "builtins_bytes": {"c++_code": "\n\t\t\t", "python_code": "\n\t\t\t\tpython__builtins__bytes=__python__builtins__wrapper(__python__bytearray)\n\t\t\t", "depends": ["python_variable", "unicode_convert", "builtins__wrapper", "string"]}, "builtins_chr": {"c++_code": "\n\t\t\tvar __python__chr(var q){\n\t\t\t\treturn std::u32string({chr(cast(q,int64_t))});\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tpython__builtins__chr=__python__builtins__wrapper(__python__chr)\n\t\t\t", "depends": ["python_variable", "unicode_convert", "builtins__wrapper", "string"]}, "builtins_divmod": {"c++_code": "\n\t\t\tvar __python__divmod(var q,var w){\n\t\t\t\tret=vector<var>();\n\t\t\t\t{python_iftype(q,int64_t){\n\t\t\t\t\tauto d=s;\n\t\t\t\t\t{python_iftype(w,int64_t){\n\t\t\t\t\t\tret[0]=d/s;\n\t\t\t\t\t\tret[1]=d%s;\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (ret.size()==0){\n\t\t\t\t\tq=__python__float(q);\n\t\t\t\t\tw=__python__float(w);\n\t\t\t\t\tauto e=cast(q,long double);\n\t\t\t\t\tauto r=cast(w,long double);\n\t\t\t\t\tauto t=std::floor(e/r);\n\t\t\t\t\tret[0]=t;\n\t\t\t\t\tret[1]=e-t*r;\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tpython__builtins__divmod=__python__builtins__wrapper(__python__divmod)\n\t\t\t", "depends": ["python_variable", "cmath", "builtins__wrapper", "vector"]}, "builtins_id": {"c++_code": "\n\t\t\tvar __python__id(var q){\n\t\t\t\t{python_iftype(q,int64_t){\n\t\t\t\t\treturn int64_t(&cast(q,decltype(s)));\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(q,long double){\n\t\t\t\t\treturn int64_t(&cast(q,decltype(s)));\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(q,std::string){\n\t\t\t\t\treturn int64_t(&cast(q,decltype(s)));\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(q,std::u32string){\n\t\t\t\t\treturn int64_t(&cast(q,decltype(s)));\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t{python_iftype(q,std::vector<var>){\n\t\t\t\t\treturn int64_t(&cast(q,decltype(s)));\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tpython__builtins__divmod=__python__builtins__wrapper(__python__divmod,0)\n\t\t\t", "depends": ["python_variable", "string", "builtins__wrapper", "vector"]}, "builtins_list": {"c++_code": "\n\t\t\t\tvar __python__list(var q=std::vector<var>()){\n\t\t\t\t\tauto s=std::vector<var>();\n\t\t\t\t\tfor (var w:python_iterate(q)){\n\t\t\t\t\t\ts.push_back(w);\n\t\t\t\t\t}\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tpython__builtins__list=__python__builtins__wrapper(__python__list)\n\t\t\t", "depends": ["python_variable", "builtins__wrapper", "vector"]}, "builtins_str": {"c++_code": "\n\t\t\t\tvar __python__str(var q=std::u32string()){\n\t\t\t\t\t{python_iftype(q,std::u32string){\n\t\t\t\t\t\treturn s;\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t{python_iftype(q,std::string){\n\t\t\t\t\t\treturn to_u32(s);\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t{python_iftype(q,int64_t){\n\t\t\t\t\t\treturn to_u32(std::to_string(s));\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t{python_iftype(q,int){\n\t\t\t\t\t\treturn to_u32(std::to_string(s));\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t{python_iftype(q,bool){\n\t\t\t\t\t\treturn to_u32(s?\"True\":\"False\");\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t", "python_code": "\n\t\t\t\tpython__builtins__str=__python__builtins__wrapper(__python__str,0)\n\t\t\t", "depends": ["python_variable", "builtins__wrapper", "vector", "string"]}, "unicode_convert": {"c++_code": "\n\t\t\t\tchar32_t chr(int64_t q){\n\t\t\t\t\tif(q<(1<<7)){\n\t\t\t\t\t\treturn ((q&127)<<0);\n\t\t\t\t\t}\n\t\t\t\t\tif(q<(1<<11)){\n\t\t\t\t\t\treturn 49280+((q&1984)<<2)+((q&63)<<0);\n\t\t\t\t\t}\n\t\t\t\t\tif(q<(1<<16)){\n\t\t\t\t\t\treturn 14712960+((q&61440)<<4)+((q&4032)<<2)+((q&63)<<0);\n\t\t\t\t\t}\n\t\t\t\t\tif(q<(1<<21)){\n\t\t\t\t\t\treturn 4034953344+((q&1835008)<<6)+((q&258048)<<4)+((q&4032)<<2)+((q&63)<<0);\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tint64_t ord(char32_t q){\n\t\t\t\t\tint64_t r=0;\n\t\t\t\t\tint w,e;\n\t\t\t\t\tfor (w=3*8;w>-1;w-=8){\n\t\t\t\t\t\tint started=0;\n\t\t\t\t\t\tfor (e=7;e>-1;--e){\n\t\t\t\t\t\t\tif (started==0 and (q&(1<<(w+e)))==0){\n\t\t\t\t\t\t\t\tstarted=1;\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tif (started){\n\t\t\t\t\t\t\t\tr=(r<<1)+!!(q&(1<<(w+e)));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\n\t\t\t\tstd::u32string to_u32(std::string q){\n\t\t\t\t\tstd::u32string r;\n\t\t\t\t\tfor(int64_t w=0;w<q.size();++w){\n\t\t\t\t\t\tif ((q[w]&(0b10000000))==0){\n\t\t\t\t\t\t\tr.push_back(((int32_t(uint8_t(q[w]))<<0)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((q[w]&(0b11100000))==0b11000000 and w<q.size()-1){\n\t\t\t\t\t\t\tr.push_back(((int32_t(uint8_t(q[w]))<<8)+(int32_t(uint8_t(q[w+1]))<<0)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((q[w]&(0b11110000))==0b11100000 and w<q.size()-2){\n\t\t\t\t\t\t\tr.push_back(((int32_t(uint8_t(q[w]))<<16)+(int32_t(uint8_t(q[w+1]))<<8)+(int32_t(uint8_t(q[w+2]))<<0)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((q[w]&(0b11111000))==0b11110000 and w<q.size()-3){\n\t\t\t\t\t\t\tr.push_back(((int32_t(uint8_t(q[w]))<<24)+(int32_t(uint8_t(q[w+1]))<<16)+(int32_t(uint8_t(q[w+2]))<<8)+(int32_t(uint8_t(q[w+3]))<<0)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor(auto &w:r){\n\t\t\t\t\t\tw=ord(w);\n\t\t\t\t\t}\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\n\t\t\t\tstd::string to_u8(std::u32string q){\n\t\t\t\t\tfor(auto &w:q){\n\t\t\t\t\t\tw=chr(w);\n\t\t\t\t\t}\t\n\t\t\t\t\tstd::string r;\n\t\t\t\t\tfor(auto w:q){\n\t\t\t\t\t\tif (w&0b11111111000000000000000000000000){\n\t\t\t\t\t\t\tr.push_back((w&0b11111111000000000000000000000000)>>24);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (w&0b111111110000000000000000){\n\t\t\t\t\t\t\tr.push_back((w&0b111111110000000000000000)>>16);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (w&0b1111111100000000){\n\t\t\t\t\t\t\tr.push_back((w&0b1111111100000000)>>8);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr.push_back(w&0b11111111);\n\t\t\t\t\t}\n\t\t\t\t\treturn r;\n\t\t\t\t}\n\t\t\t", "python_code": "", "depends": ["string"]}, "debug_str": {"c++_code": "\n\t\t\t\tstd::string python_debug_str(var a){\n\t\t\t\t\tstd::string d=\"type not found\";\n\t\t\t\t\t{python_iftype(a,std::string)d=s;}\n\t\t\t\t\t{python_iftype(a,std::u32string)d=to_u8(s);}\n\t\t\t\t\t{python_iftype(a,int)d=std::to_string(s);}\n\t\t\t\t\t{python_iftype(a,int64_t)d=std::to_string(s);}\n\t\t\t\t\t{python_iftype(a,bool)d=s?\"True\":\"False\";}\n\t\t\t\t\treturn d;\n\t\t\t\t}\n\t\t", "python_code": "", "depends": ["python_variable", "unicode_convert"]}, "operator_Not": {"c++_code": "\n\t\t\tvar python_operator_Not(var q){\n\t\t\t\tq=__python__bool(q);\n\t\t\t\t{python_iftype(q,bool){\n\t\t\t\t\treturn !s;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t", "python_code": "", "depends": ["python_variable"]}, "operator_Pow": {"c++_code": "\n\t\t\tauto python_operator_Pow=__python__pow;\n\t\t", "python_code": "", "depends": ["python_variable", "builtins_pow"]}, "operator_Is": {"c++_code": "\n\t\t\tvar python_operator_Is(var q,var w){\n\t\t\t\treturn python_operator_Eq(__python__id(q),__python__id(w));\n\t\t\t}\n\t\t", "python_code": "", "depends": ["python_variable", "builtins_id", "operator_Eq"]}, "operator_IsNot": {"c++_code": "\n\t\t\tvar python_operator_IsNot(var q,var w){\n\t\t\t\treturn python_operator_Not(python_operator_Is(q,w));\n\t\t\t}\n\t\t", "python_code": "", "depends": ["python_variable", "operator_Is"]}, "operator_In": {"c++_code": "\n\t\t\tvar python_operator_NotIn(var q,var w){\n\t\t\t\tfor (auto e:python_iterate(w)){\n\t\t\t\t\tif (operator_Eq(q,e)){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t", "python_code": "", "depends": ["python_variable", "operator_Eq"]}, "operator_NotIn": {"c++_code": "\n\t\t\tvar python_operator_NotIn(var q,var w){\n\t\t\t\treturn python_operator_Not(python_operator_In(q,w));\n\t\t\t}\n\t\t", "python_code": "", "depends": ["python_variable", "operator_In"]}, "stdc++": {"c++_code": "#include<bits/stdc++.h>", "python_code": "", "depends": []}, "vector": {"c++_code": "#include<vector>", "python_code": "", "depends": []}, "string": {"c++_code": "#include<string>", "python_code": "", "depends": []}, "iostream": {"c++_code": "#include<iostream>", "python_code": "", "depends": []}, "algorithm": {"c++_code": "#include<algorithm>", "python_code": "", "depends": []}, "map": {"c++_code": "#include<map>", "python_code": "", "depends": []}, "any": {"c++_code": "#include<any>", "python_code": "", "depends": []}, "cmath": {"c++_code": "#include<cmath>", "python_code": "", "depends": []}, "cstdio": {"c++_code": "#include<cstdio>", "python_code": "", "depends": []}, "levels": {"c++_code": "\n\t\t\t\t#define python_level_type_first std::u32string\n\t\t\t\t#define python_level_type_second var\n\t\t\t\tstd::vector<std::map<python_level_type_first,python_level_type_second*>> python_globals;\n\t\t\t\t#define python_global(q)\\\n\t\t\t\t \tif (python_globals[python_globals.size()-1].find(q) == python_globals[python_globals.size()-1].end()){\\\n\t\t\t\t\t\tpython_locals[q]=int64_t(0);\\\n\t\t\t\t\t\tpython_globals[python_globals.size()-1][q]=&(python_locals[q]);\\\n\t\t\t\t\t}\\\n\t\t\t\t\tpython_globals[python_globals.size()-1][q]=python_globals[0][q];\\\n\t\t\t\t\t\n\t\t\t\t#define python_nonlocal(q)\\\n\t\t\t\t \tif (python_globals[python_globals.size()-1].find(q) == python_globals[python_globals.size()-1].end()){\\\n\t\t\t\t\t\tpython_locals[q]=int64_t(0);\\\n\t\t\t\t\t\tpython_globals[python_globals.size()-1][q]=&(python_locals[q]);\\\n\t\t\t\t\t}\\\n\t\t\t\t\tpython_globals[python_globals.size()-1][q]=python_globals[python_globals.size()-2][q];\n\t\t\t\t\t\n\t\t\t\t#define python_get(q) (*(python_globals[python_globals.size()-1][q]))\n\n\t\t\t\t#define python_set(q) python_set_(q,&python_locals)\n\n\t\t\t\tpython_level_type_second& python_set_(python_level_type_first q,std::map<python_level_type_first,python_level_type_second> *python_locals_pointer){\n\t\t\t\t\tif (python_globals[python_globals.size()-1].find(q) == python_globals[python_globals.size()-1].end()){\n\t\t\t\t\t\t(*python_locals_pointer)[q]=int64_t(0);\n\t\t\t\t\t\tpython_globals[python_globals.size()-1][q]=&((*python_locals_pointer)[q]);\n\t\t\t\t\t}\n\t\t\t\t\treturn *(python_globals[python_globals.size()-1][q]);\n\t\t\t\t}\n\n\t\t\t\t#define python_create_level()\\\n\t\t\t\t\tpython_globals.emplace_back();\\\n\t\t\t\t\tstd::map<python_level_type_first,python_level_type_second> python_locals;\n\n\t\t\t\t#define python_delete_level()\\\n\t\t\t\t\tpython_globals.pop_back();\n\t\t\t", "python_code": "", "depends": ["vector", "string", "map", "python_variable"]}, "operator_UAdd": {"c++_code": "var python_operator_UAdd(var q){\n\t{python_iftype(q,long double){\n\t\treturn +s;\t}}\n\t{python_iftype(q,int64_t){\n\t\treturn +s;\t}}\n\t{python_iftype(q,bool){\n\t\treturn +s;\t}}\n\tstd::cout<<\"+\"<<q.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_USub": {"c++_code": "var python_operator_USub(var q){\n\t{python_iftype(q,long double){\n\t\treturn -s;\t}}\n\t{python_iftype(q,int64_t){\n\t\treturn -s;\t}}\n\t{python_iftype(q,bool){\n\t\treturn -s;\t}}\n\tstd::cout<<\"-\"<<q.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_Invert": {"c++_code": "var python_operator_Invert(var q){\n\t{python_iftype(q,long double){\n\t\treturn ~s;\t}}\n\t{python_iftype(q,int64_t){\n\t\treturn ~s;\t}}\n\t{python_iftype(q,bool){\n\t\treturn ~s;\t}}\n\tstd::cout<<\"~\"<<q.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_Add": {"c++_code": "var python_operator_Add(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a+s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a+s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a+s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a+s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a+s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a+s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a+s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a+s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a+s;\t\t}}\n\t}}\n\t{python_iftype(q,std::string){\n\t\t{python_iftype(w,std::string){\n\t\t\tauto a=cast(q,std::string);\n\t\t\treturn a+s;\t\t}}\n\t}}\n\t{python_iftype(q,std::u32string){\n\t\t{python_iftype(w,std::u32string){\n\t\t\tauto a=cast(q,std::u32string);\n\t\t\treturn a+s;\t\t}}\n\t}}\n\t{python_iftype(q,std::vector<var>){\n\t\t{python_iftype(w,std::string){\n\t\t\tauto a=cast(q,std::vector<var>);\n\n\t\t\t\tauto r=std::vector<var>(a.begin(),a.end());\n\t\t\t\tfor (auto w:s){\n\t\t\t\t\tr.push_back(std::string({w}));\n\t\t\t\t}\n\t\t\t\treturn r;\n\t\t\t\t\t}}\n\t}}\n\t{python_iftype(q,std::vector<var>){\n\t\t{python_iftype(w,std::u32string){\n\t\t\tauto a=cast(q,std::vector<var>);\n\n\t\t\t\tauto r=std::vector<var>(a.begin(),a.end());\n\t\t\t\tfor (auto w:s){\n\t\t\t\t\tr.push_back(std::u32string({w}));\n\t\t\t\t}\n\t\t\t\treturn r;\n\t\t\t\t\t}}\n\t}}\n\t{python_iftype(q,std::vector<var>){\n\t\t{python_iftype(w,std::vector<var>){\n\t\t\tauto a=cast(q,std::vector<var>);\n\n\t\t\t\tauto r=std::vector<var>(a.begin(),a.end());\n\t\t\t\tr.insert(r.end(),s.begin(),s.end());\n\t\t\t\treturn r;\n\t\t\t\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\"+\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_Sub": {"c++_code": "var python_operator_Sub(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a-s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a-s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a-s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a-s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a-s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a-s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a-s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a-s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a-s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\"-\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_Mult": {"c++_code": "var python_operator_Mult(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a*s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a*s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a*s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a*s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a*s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a*s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a*s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a*s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a*s;\t\t}}\n\t}}\n\t{python_iftype(q,std::string){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,std::string);\n\n\t\t\t\tauto r=decltype(a)();\n\t\t\t\tfor (int64_t e=0;e<s;++e){\n\t\t\t\t\tr.insert(r.end(),a.begin(),a.end());\n\t\t\t\t}\n\t\t\t\treturn r;\n\t\t\t\t\t}}\n\t}}\n\t{python_iftype(q,std::u32string){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,std::u32string);\n\n\t\t\t\tauto r=decltype(a)();\n\t\t\t\tfor (int64_t e=0;e<s;++e){\n\t\t\t\t\tr.insert(r.end(),a.begin(),a.end());\n\t\t\t\t}\n\t\t\t\treturn r;\n\t\t\t\t\t}}\n\t}}\n\t{python_iftype(q,std::vector<var>){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,std::vector<var>);\n\n\t\t\t\tauto r=decltype(a)();\n\t\t\t\tfor (int64_t e=0;e<s;++e){\n\t\t\t\t\tr.insert(r.end(),a.begin(),a.end());\n\t\t\t\t}\n\t\t\t\treturn r;\n\t\t\t\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\"*\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_Div": {"c++_code": "var python_operator_Div(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\"/\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_FloorDiv": {"c++_code": "var python_operator_FloorDiv(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a/s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\"/\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_Mod": {"c++_code": "var python_operator_Mod(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a%s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a%s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a%s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a%s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a%s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a%s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a%s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a%s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a%s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\"%\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_LShift": {"c++_code": "var python_operator_LShift(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a<<s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a<<s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a<<s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a<<s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a<<s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a<<s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a<<s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a<<s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a<<s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\"<<\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_RShift": {"c++_code": "var python_operator_RShift(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a>>s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a>>s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a>>s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a>>s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a>>s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a>>s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a>>s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a>>s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a>>s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\">>\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_BitOr": {"c++_code": "var python_operator_BitOr(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a|s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a|s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a|s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a|s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a|s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a|s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a|s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a|s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a|s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\"|\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_BitXor": {"c++_code": "var python_operator_BitXor(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a^s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a^s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a^s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a^s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a^s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a^s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a^s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a^s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a^s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\"^\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_BitAnd": {"c++_code": "var python_operator_BitAnd(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a&s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a&s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a&s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a&s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a&s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a&s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a&s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a&s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a&s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\"&\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_Eq": {"c++_code": "var python_operator_Eq(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a==s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a==s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a==s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a==s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a==s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a==s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a==s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a==s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a==s;\t\t}}\n\t}}\n\t{python_iftype(q,std::string){\n\t\t{python_iftype(w,std::string){\n\t\t\tauto a=cast(q,std::string);\n\t\t\treturn a==s;\t\t}}\n\t}}\n\t{python_iftype(q,std::u32string){\n\t\t{python_iftype(w,std::u32string){\n\t\t\tauto a=cast(q,std::u32string);\n\t\t\treturn a==s;\t\t}}\n\t}}\n\t{python_iftype(q,std::vector<var>){\n\t\t{python_iftype(w,std::vector<var>){\n\t\t\tauto a=cast(q,std::vector<var>);\n\t\t\treturn a==s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\"==\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_NotEq": {"c++_code": "var python_operator_NotEq(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a!=s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a!=s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a!=s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a!=s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a!=s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a!=s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a!=s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a!=s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a!=s;\t\t}}\n\t}}\n\t{python_iftype(q,std::string){\n\t\t{python_iftype(w,std::string){\n\t\t\tauto a=cast(q,std::string);\n\t\t\treturn a!=s;\t\t}}\n\t}}\n\t{python_iftype(q,std::u32string){\n\t\t{python_iftype(w,std::u32string){\n\t\t\tauto a=cast(q,std::u32string);\n\t\t\treturn a!=s;\t\t}}\n\t}}\n\t{python_iftype(q,std::vector<var>){\n\t\t{python_iftype(w,std::vector<var>){\n\t\t\tauto a=cast(q,std::vector<var>);\n\t\t\treturn a!=s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\"!=\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_Lt": {"c++_code": "var python_operator_Lt(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a<s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a<s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a<s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a<s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a<s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a<s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a<s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a<s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a<s;\t\t}}\n\t}}\n\t{python_iftype(q,std::string){\n\t\t{python_iftype(w,std::string){\n\t\t\tauto a=cast(q,std::string);\n\t\t\treturn a<s;\t\t}}\n\t}}\n\t{python_iftype(q,std::u32string){\n\t\t{python_iftype(w,std::u32string){\n\t\t\tauto a=cast(q,std::u32string);\n\t\t\treturn a<s;\t\t}}\n\t}}\n\t{python_iftype(q,std::vector<var>){\n\t\t{python_iftype(w,std::vector<var>){\n\t\t\tauto a=cast(q,std::vector<var>);\n\t\t\treturn a<s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\"<\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_LtE": {"c++_code": "var python_operator_LtE(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a<=s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a<=s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a<=s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a<=s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a<=s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a<=s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a<=s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a<=s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a<=s;\t\t}}\n\t}}\n\t{python_iftype(q,std::string){\n\t\t{python_iftype(w,std::string){\n\t\t\tauto a=cast(q,std::string);\n\t\t\treturn a<=s;\t\t}}\n\t}}\n\t{python_iftype(q,std::u32string){\n\t\t{python_iftype(w,std::u32string){\n\t\t\tauto a=cast(q,std::u32string);\n\t\t\treturn a<=s;\t\t}}\n\t}}\n\t{python_iftype(q,std::vector<var>){\n\t\t{python_iftype(w,std::vector<var>){\n\t\t\tauto a=cast(q,std::vector<var>);\n\t\t\treturn a<=s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\"<=\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_Gt": {"c++_code": "var python_operator_Gt(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a>s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a>s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a>s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a>s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a>s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a>s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a>s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a>s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a>s;\t\t}}\n\t}}\n\t{python_iftype(q,std::string){\n\t\t{python_iftype(w,std::string){\n\t\t\tauto a=cast(q,std::string);\n\t\t\treturn a>s;\t\t}}\n\t}}\n\t{python_iftype(q,std::u32string){\n\t\t{python_iftype(w,std::u32string){\n\t\t\tauto a=cast(q,std::u32string);\n\t\t\treturn a>s;\t\t}}\n\t}}\n\t{python_iftype(q,std::vector<var>){\n\t\t{python_iftype(w,std::vector<var>){\n\t\t\tauto a=cast(q,std::vector<var>);\n\t\t\treturn a>s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\">\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}, "operator_GtE": {"c++_code": "var python_operator_GtE(var q,var w){\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a>=s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a>=s;\t\t}}\n\t}}\n\t{python_iftype(q,long double){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,long double);\n\t\t\treturn a>=s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a>=s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a>=s;\t\t}}\n\t}}\n\t{python_iftype(q,int64_t){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,int64_t);\n\t\t\treturn a>=s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,long double){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a>=s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,int64_t){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a>=s;\t\t}}\n\t}}\n\t{python_iftype(q,bool){\n\t\t{python_iftype(w,bool){\n\t\t\tauto a=cast(q,bool);\n\t\t\treturn a>=s;\t\t}}\n\t}}\n\t{python_iftype(q,std::string){\n\t\t{python_iftype(w,std::string){\n\t\t\tauto a=cast(q,std::string);\n\t\t\treturn a>=s;\t\t}}\n\t}}\n\t{python_iftype(q,std::u32string){\n\t\t{python_iftype(w,std::u32string){\n\t\t\tauto a=cast(q,std::u32string);\n\t\t\treturn a>=s;\t\t}}\n\t}}\n\t{python_iftype(q,std::vector<var>){\n\t\t{python_iftype(w,std::vector<var>){\n\t\t\tauto a=cast(q,std::vector<var>);\n\t\t\treturn a>=s;\t\t}}\n\t}}\n\tstd::cout<<q.type().name()<<\">=\"<<w.type().name()<<\" is unsupported\"<<std::endl;\n\treturn int64_t(0);}", "python_code": "", "depends": ["iostream", "vector", "string"]}}